Task makeEncodeTask(Jar jarTask, File inputFile, File outputFile) {
  def taskName = "encode_${inputFile.absolutePath.replaceAll('/', '_')}_As_${outputFile.absolutePath.replaceAll('/', '_')}"

  if (project.tasks.findByName(taskName)) {
    return project.tasks[taskName]
  } else {
    return task(taskName, type: JavaExec, dependsOn: jarTask) {
      inputs.file jarTask.archivePath
      inputs.file inputFile
      outputs.file outputFile

      main '-jar'
      args jarTask.archivePath
      args '-i', inputFile.path
      args '-o', outputFile.path
      standardOutput = new ByteArrayOutputStream()

      doFirst {
        outputFile.parentFile.mkdirs()
      }
    }
  }
}

Task makeCheckOutputTask(File inputFile, File expectedOutputFile) {
  def testOutputFile = file("${buildDir}/tmp/test-output-binaries/${inputFile.name.replace('.ducky', '')}.bin")

  def encodeTask = makeEncodeTask(neoJar, inputFile, testOutputFile)
  return task("checkOutput_${inputFile.name.replaceAll('/', '_')}") {
    inputs.files encodeTask.outputs.files
    inputs.files expectedOutputFile
    outputs.upToDateWhen { !encodeTask.didWork }
    doFirst {
      byte[] expectedOutput = expectedOutputFile.bytes
      byte[] actualOutput = testOutputFile.bytes

      assert actualOutput.length == expectedOutput.length,
        "Wrong file length (expected = ${expectedOutput.length}, actual = ${actualOutput.length}"

      for(int i = 0; i < expectedOutput.length; ++i) {
        assert actualOutput[i] == expectedOutput[i],
          "Wrong output byte at index $i (expected = ${expectedOutput[i]}, actual = ${actualOutput[i]})"
      }
    }
  }
}

task makeOutputDumps

task testOutputs
check.dependsOn testOutputs

fileTree('src/test/resources/') {
  include '*.ducky'
}.visit { f ->
  if(!f.isDirectory()) {
    def outputFile = file("src/test/outputs/${f.name.replace('.ducky', '')}.bin")
    makeOutputDumps.dependsOn makeEncodeTask(jar, f.file, outputFile)

    testOutputs.dependsOn makeCheckOutputTask(f.file, outputFile)
  }
}
